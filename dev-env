#!/usr/bin/env bash

dry_run="0"

# Set XDG_CONFIG_HOME if not defined
if [ -z "$XDG_CONFIG_HOME" ]; then
    echo "No XDG_CONFIG_HOME set, using ~/.config"
    XDG_CONFIG_HOME="$HOME/.config"
fi

# Check for DEV_ENV environment variable
if [ -z "$DEV_ENV" ]; then
    echo "Environment variable DEV_ENV must be set"
    exit 1
fi

# Handle dry run option
if [[ "$1" == "--dry" ]]; then
    dry_run="1"
fi

# Logging function
log() {
    if [[ "$dry_run" == "1" ]]; then
        echo "[DRY_RUN]: $1"
    else
        echo "$1"
    fi
}

log "env: $DEV_ENV"

# Function to update directories
update_files() {
    local source_dir="$1"
    local dest_dir="$2"

    log "Copying files from: $source_dir"

    # Check if source directory exists
    if [[ ! -d "$source_dir" ]]; then
        log "Error: Source directory $source_dir does not exist"
        return 1
    fi

    pushd "$source_dir" &>/dev/null || return 1

    # Use find to iterate over directories
    find . -maxdepth 1 -type d -not -path . | while IFS= read -r c; do
        # Skip the current directory (.)
        [[ "$c" == "." ]] && continue

        # Skip the nvim directory in ~/.config
        if [[ "$dest_dir" == "$XDG_CONFIG_HOME" && "${c#./}" == "nvim" ]]; then
            log "    Skipping: nvim directory to avoid modifying ~/.config/nvim"
            continue
        fi

        # Skip the share/nvim directory in ~/.local
        if [[ "$dest_dir" == "$HOME/.local" && "${c#./}" == "share" ]]; then
            pushd "$c" &>/dev/null || continue
            if [[ -d "nvim" ]]; then
                log "    Skipping: share/nvim directory to avoid modifying ~/.local/share/nvim"
                popd &>/dev/null
                continue
            fi
            popd &>/dev/null
        fi

        # Explicitly skip the lazy directory in ~/.local
        if [[ "$dest_dir" == "$HOME/.local" && "${c#./}" == "lazy" ]]; then
            log "    Skipping: lazy directory to avoid modifying ~/.local/share/nvim/lazy"
            continue
        fi

        local directory="${dest_dir%/}/${c#./}"
        log "    Removing: rm -rf $directory"

        if [[ "$dry_run" == "0" ]]; then
            rm -rf "$directory"
        fi

        log "    Copying env: cp -r $c $dest_dir"
        if [[ "$dry_run" == "0" ]]; then
            cp -r "$c" "$dest_dir"
        fi
    done

    popd &>/dev/null
}

# Function to copy individual files
copy() {
    local source_file="$1"
    local dest_file="$2"

    log "Removing: $dest_file"
    if [[ "$dry_run" == "0" ]]; then
        rm -f "$dest_file"
    fi

    log "Copying: $source_file to $dest_file"
    if [[ "$dry_run" == "0" ]]; then
        cp "$source_file" "$dest_file"
    fi
}

# Update directories
update_files "$DEV_ENV/env/.config" "$XDG_CONFIG_HOME"
update_files "$DEV_ENV/env/.local" "$HOME/.local"

# Copy individual files
copy "$DEV_ENV/tmux-sessionizer/tmux-sessionizer" "$HOME/.local/scripts/tmux-sessionizer"
copy "$DEV_ENV/env/.zsh_profile" "$HOME/.zsh_profile"
copy "$DEV_ENV/env/.zshrc" "$HOME/.zshrc"
copy "$DEV_ENV/env/.xprofile" "$HOME/.xprofile"
copy "$DEV_ENV/env/.tmux-sessionizer" "$HOME/.tmux-sessionizer"
copy "$DEV_ENV/dev-env" "$HOME/.local/scripts/dev-env"

# Reload Hyprland configuration
hyprctl reload