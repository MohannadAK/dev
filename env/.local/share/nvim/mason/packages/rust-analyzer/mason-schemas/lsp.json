[{"properties":{"rust-analyzer.restartServerOnConfigChange":{"default":false,"markdownDescription":"Whether to restart the server automatically when certain settings that require a restart are changed.","type":"boolean"},"rust-analyzer.showSyntaxTree":{"default":false,"markdownDescription":"Whether to show the syntax tree view.","type":"boolean"},"rust-analyzer.showUnlinkedFileNotification":{"default":true,"markdownDescription":"Whether to show a notification for unlinked files asking the user to add the corresponding Cargo.toml to the linked projects setting.","type":"boolean"},"rust-analyzer.initializeStopped":{"default":false,"markdownDescription":"Do not start rust-analyzer server when the extension is activated.","type":"boolean"},"rust-analyzer.showRequestFailedErrorNotification":{"default":true,"markdownDescription":"Whether to show error notifications for failing requests.","type":"boolean"},"rust-analyzer.testExplorer":{"default":false,"markdownDescription":"Whether to show the test explorer.","type":"boolean"},"rust-analyzer.showDependenciesExplorer":{"default":true,"markdownDescription":"Whether to show the dependencies view.","type":"boolean"}},"title":"general"},{"properties":{"rust-analyzer.runnables.extraEnv":{"default":null,"anyOf":[{"type":"null"},{"items":{"properties":{"mask":{"description":"Runnable name mask","type":"string"},"platform":{"default":null,"markdownDescription":"Platform(s) filter like \"win32\" or [\"linux\", \"win32\"]. See [process.platform](https://nodejs.org/api/process.html#processplatform) values.","type":["null","string","array"]},"env":{"description":"Variables in form of { \"key\": \"value\"}","type":"object"}},"type":"object"},"type":"array"},{"description":"Variables in form of { \"key\": \"value\"}","type":"object"}],"markdownDescription":"Environment variables passed to the runnable launched using `Test` or `Debug` lens or `rust-analyzer.run` command."},"rust-analyzer.runnables.problemMatcher":{"default":["$rustc"],"markdownDescription":"Problem matchers to use for `rust-analyzer.run` command, eg `[\"$rustc\", \"$rust-panic\"]`.","type":"array","items":{"type":"string"}},"rust-analyzer.runnables.askBeforeUpdateTest":{"default":true,"markdownDescription":"Ask before updating the test when running it.","type":"boolean"}},"title":"runnables"},{"properties":{"rust-analyzer.statusBar.clickAction":{"default":"openLogs","enumDescriptions":["Stop Server","Open Logs"],"type":"string","enum":["stopServer","openLogs"],"markdownDescription":"Action to run when clicking the extension status bar item."},"rust-analyzer.statusBar.showStatusBar":{"default":{"documentSelector":[{"language":"rust"},{"pattern":"**/Cargo.toml"},{"pattern":"**/Cargo.lock"},{"pattern":"extension-output-rust-lang.rust-analyzer*","scheme":"output"}]},"anyOf":[{"enum":["always","never"],"type":"string"},{"properties":{"documentSelector":{"items":{"properties":{"language":{"type":"string"},"notebookType":{"type":"string"},"pattern":{"type":"string"},"scheme":{"type":"string"}},"type":"object"},"type":"array"}},"type":"object"}],"markdownDescription":"When to show the extension status bar.\n\n`\"always\"` Always show the status bar.\n\n`\"never\"` Never show the status bar.\n\n`{ documentSelector: <DocumentSelector>[] }` Show the status bar if the open file matches any of the given document selectors.\n\nSee [VS Code -- DocumentSelector](https://code.visualstudio.com/api/references/document-selector) for more information."}},"title":"statusBar"},{"properties":{"rust-analyzer.server.extraEnv":{"default":null,"additionalProperties":{"type":["string","number","null"]},"markdownDescription":"Extra environment variables that will be passed to the rust-analyzer executable. Useful for passing e.g. `RA_LOG` for debugging.","type":["null","object"]},"rust-analyzer.server.path":{"default":null,"markdownDescription":"Path to rust-analyzer executable (points to bundled binary by default).","type":["null","string"],"scope":"machine-overridable"}},"title":"server"},{"properties":{"rust-analyzer.trace.extension":{"default":false,"type":"boolean","description":"Enable logging of VS Code extensions itself.","markdownDeprecationMessage":"Log level is now controlled by the [Developer: Set Log Level...](command:workbench.action.setLogLevel) command.You can set the log level for the current session and also the default log level from there. This is also available by clicking the gear icon on the OUTPUT tab when Rust Analyzer Client is visible or by passing the --log rust-lang.rust-analyzer:debug parameter to VS Code."},"rust-analyzer.trace.server":{"default":"off","enumDescriptions":["No traces","Error only","Full log"],"type":"string","enum":["off","messages","verbose"],"description":"Trace requests to the rust-analyzer (this is usually overly verbose and not recommended for regular users).","scope":"window"}},"title":"trace"},{"properties":{"rust-analyzer.debug.engine":{"default":"auto","type":"string","enum":["auto","llvm-vs-code-extensions.lldb-dap","vadimcn.vscode-lldb","ms-vscode.cpptools","webfreak.debug"],"markdownEnumDescriptions":["Use the first available extension out of [LLDB DAP](https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.lldb-dap), [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb), [C/C++ for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools), and [Native Debug](https://marketplace.visualstudio.com/items?itemName=webfreak.debug).","Use [LLDB DAP](https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.lldb-dap)","Use [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb)","Use [C/C++ for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)","Use [Native Debug](https://marketplace.visualstudio.com/items?itemName=webfreak.debug)"],"description":"Preferred debug engine."},"rust-analyzer.debug.sourceFileMap":{"default":{"/rustc/<id>":"${env:USERPROFILE}/.rustup/toolchains/<toolchain-id>/lib/rustlib/src/rust"},"const":"auto","description":"Optional source file mappings passed to the debug engine.","type":["object","string"]},"rust-analyzer.debug.buildBeforeRestart":{"default":false,"markdownDescription":"Whether to rebuild the project modules before debugging the same test again","type":"boolean"},"rust-analyzer.debug.engineSettings":{"default":{},"markdownDescription":"Optional settings passed to the debug engine. Example: `{ \"lldb\": { \"terminal\":\"external\"} }`","type":"object"}},"title":"debug"},{"properties":{"rust-analyzer.typing.continueCommentsOnNewline":{"default":true,"markdownDescription":"Whether to prefix newlines after comments with the corresponding comment prefix.","type":"boolean"}},"title":"typing"},{"properties":{"rust-analyzer.diagnostics.previewRustcOutput":{"default":false,"markdownDescription":"Whether to show the main part of the rendered rustc output of a diagnostic message.","type":"boolean"},"rust-analyzer.diagnostics.useRustcErrorCode":{"default":false,"markdownDescription":"Whether to show diagnostics using the original rustc error code. If this is false, all rustc diagnostics will have the code 'rustc(Click for full compiler diagnostics)'","type":"boolean"}},"title":"diagnostics"},{"title":"$generated-start"},{"properties":{"rust-analyzer.assist.emitMustUse":{"default":false,"markdownDescription":"Whether to insert #[must_use] when generating `as_` methods\nfor enum variants.","type":"boolean"}},"title":"assist"},{"properties":{"rust-analyzer.assist.expressionFillDefault":{"default":"todo","markdownDescription":"Placeholder expression to use for missing expressions in assists.","type":"string","enum":["todo","default"],"enumDescriptions":["Fill missing expressions with the `todo` macro","Fill missing expressions with reasonable defaults, `new` or `default` constructors."]}},"title":"assist"},{"properties":{"rust-analyzer.assist.termSearch.borrowcheck":{"default":true,"markdownDescription":"Enable borrow checking for term search code assists. If set to false, also there will be more suggestions, but some of them may not borrow-check.","type":"boolean"}},"title":"assist"},{"properties":{"rust-analyzer.assist.termSearch.fuel":{"default":1800,"markdownDescription":"Term search fuel in \"units of work\" for assists (Defaults to 1800).","minimum":0,"type":"integer"}},"title":"assist"},{"properties":{"rust-analyzer.cachePriming.enable":{"default":true,"markdownDescription":"Warm up caches on project load.","type":"boolean"}},"title":"cachePriming"},{"properties":{"rust-analyzer.cachePriming.numThreads":{"default":"physical","markdownDescription":"How many worker threads to handle priming caches. The default `0` means to pick automatically.","anyOf":[{"minimum":0,"maximum":255,"type":"number"},{"enum":["physical","logical"],"enumDescriptions":["Use the number of physical cores","Use the number of logical cores"],"type":"string"}]}},"title":"cachePriming"},{"properties":{"rust-analyzer.cargo.allTargets":{"default":true,"markdownDescription":"Pass `--all-targets` to cargo invocation.","type":"boolean"}},"title":"cargo"},{"properties":{"rust-analyzer.cargo.autoreload":{"default":true,"markdownDescription":"Automatically refresh project info via `cargo metadata` on\n`Cargo.toml` or `.cargo/config.toml` changes.","type":"boolean"}},"title":"cargo"},{"properties":{"rust-analyzer.cargo.buildScripts.enable":{"default":true,"markdownDescription":"Run build scripts (`build.rs`) for more precise code analysis.","type":"boolean"}},"title":"cargo"},{"properties":{"rust-analyzer.cargo.buildScripts.invocationStrategy":{"default":"per_workspace","markdownDescription":"Specifies the invocation strategy to use when running the build scripts command.\nIf `per_workspace` is set, the command will be executed for each Rust workspace with the\nworkspace as the working directory.\nIf `once` is set, the command will be executed once with the opened project as the\nworking directory.\nThis config only has an effect when `#rust-analyzer.cargo.buildScripts.overrideCommand#`\nis set.","type":"string","enum":["per_workspace","once"],"enumDescriptions":["The command will be executed for each Rust workspace with the workspace as the working directory.","The command will be executed once with the opened project as the working directory."]}},"title":"cargo"},{"properties":{"rust-analyzer.cargo.buildScripts.overrideCommand":{"default":null,"markdownDescription":"Override the command rust-analyzer uses to run build scripts and\nbuild procedural macros. The command is required to output json\nand should therefore include `--message-format=json` or a similar\noption.\n\nIf there are multiple linked projects/workspaces, this command is invoked for\neach of them, with the working directory being the workspace root\n(i.e., the folder containing the `Cargo.toml`). This can be overwritten\nby changing `#rust-analyzer.cargo.buildScripts.invocationStrategy#`.\n\nBy default, a cargo invocation will be constructed for the configured\ntargets and features, with the following base command line:\n\n```bash\ncargo check --quiet --workspace --message-format=json --all-targets --keep-going\n```\n.","items":{"type":"string"},"type":["null","array"]}},"title":"cargo"},{"properties":{"rust-analyzer.cargo.buildScripts.rebuildOnSave":{"default":true,"markdownDescription":"Rerun proc-macros building/build-scripts running when proc-macro\nor build-script sources change and are saved.","type":"boolean"}},"title":"cargo"},{"properties":{"rust-analyzer.cargo.buildScripts.useRustcWrapper":{"default":true,"markdownDescription":"Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\navoid checking unnecessary things.","type":"boolean"}},"title":"cargo"},{"properties":{"rust-analyzer.cargo.cfgs":{"default":["debug_assertions","miri"],"markdownDescription":"List of cfg options to enable with the given values.\n\nTo enable a name without a value, use `\"key\"`.\nTo enable a name with a value, use `\"key=value\"`.\nTo disable, prefix the entry with a `!`.","items":{"type":"string"},"type":"array"}},"title":"cargo"},{"properties":{"rust-analyzer.cargo.extraArgs":{"default":[],"markdownDescription":"Extra arguments that are passed to every cargo invocation.","items":{"type":"string"},"type":"array"}},"title":"cargo"},{"properties":{"rust-analyzer.cargo.extraEnv":{"default":{},"markdownDescription":"Extra environment variables that will be set when running cargo, rustc\nor other commands within the workspace. Useful for setting RUSTFLAGS.","type":"object"}},"title":"cargo"},{"properties":{"rust-analyzer.cargo.features":{"default":[],"markdownDescription":"List of features to activate.\n\nSet this to `\"all\"` to pass `--all-features` to cargo.","anyOf":[{"enum":["all"],"enumDescriptions":["Pass `--all-features` to cargo"],"type":"string"},{"items":{"type":"string"},"type":"array"}]}},"title":"cargo"},{"properties":{"rust-analyzer.cargo.noDefaultFeatures":{"default":false,"markdownDescription":"Whether to pass `--no-default-features` to cargo.","type":"boolean"}},"title":"cargo"},{"properties":{"rust-analyzer.cargo.noDeps":{"default":false,"markdownDescription":"Whether to skip fetching dependencies. If set to \"true\", the analysis is performed\nentirely offline, and Cargo metadata for dependencies is not fetched.","type":"boolean"}},"title":"cargo"},{"properties":{"rust-analyzer.cargo.sysroot":{"default":"discover","markdownDescription":"Relative path to the sysroot, or \"discover\" to try to automatically find it via\n\"rustc --print sysroot\".\n\nUnsetting this disables sysroot loading.\n\nThis option does not take effect until rust-analyzer is restarted.","type":["null","string"]}},"title":"cargo"},{"properties":{"rust-analyzer.cargo.sysrootSrc":{"default":null,"markdownDescription":"Relative path to the sysroot library sources. If left unset, this will default to\n`{cargo.sysroot}/lib/rustlib/src/rust/library`.\n\nThis option does not take effect until rust-analyzer is restarted.","type":["null","string"]}},"title":"cargo"},{"properties":{"rust-analyzer.cargo.target":{"default":null,"markdownDescription":"Compilation target override (target tuple).","type":["null","string"]}},"title":"cargo"},{"properties":{"rust-analyzer.cargo.targetDir":{"default":null,"markdownDescription":"Optional path to a rust-analyzer specific target directory.\nThis prevents rust-analyzer's `cargo check` and initial build-script and proc-macro\nbuilding from locking the `Cargo.lock` at the expense of duplicating build artifacts.\n\nSet to `true` to use a subdirectory of the existing target directory or\nset to a path relative to the workspace to use that path.","anyOf":[{"type":"null"},{"type":"boolean"},{"type":"string"}]}},"title":"cargo"},{"properties":{"rust-analyzer.cfg.setTest":{"default":true,"markdownDescription":"Set `cfg(test)` for local crates. Defaults to true.","type":"boolean"}},"title":"cfg"},{"properties":{"rust-analyzer.checkOnSave":{"default":true,"markdownDescription":"Run the check command for diagnostics on save.","type":"boolean"}},"title":"general"},{"properties":{"rust-analyzer.check.allTargets":{"default":null,"markdownDescription":"Check all targets and tests (`--all-targets`). Defaults to\n`#rust-analyzer.cargo.allTargets#`.","type":["null","boolean"]}},"title":"check"},{"properties":{"rust-analyzer.check.command":{"default":"check","markdownDescription":"Cargo command to use for `cargo check`.","type":"string"}},"title":"check"},{"properties":{"rust-analyzer.check.extraArgs":{"default":[],"markdownDescription":"Extra arguments for `cargo check`.","items":{"type":"string"},"type":"array"}},"title":"check"},{"properties":{"rust-analyzer.check.extraEnv":{"default":{},"markdownDescription":"Extra environment variables that will be set when running `cargo check`.\nExtends `#rust-analyzer.cargo.extraEnv#`.","type":"object"}},"title":"check"},{"properties":{"rust-analyzer.check.features":{"default":null,"markdownDescription":"List of features to activate. Defaults to\n`#rust-analyzer.cargo.features#`.\n\nSet to `\"all\"` to pass `--all-features` to Cargo.","anyOf":[{"enum":["all"],"enumDescriptions":["Pass `--all-features` to cargo"],"type":"string"},{"items":{"type":"string"},"type":"array"},{"type":"null"}]}},"title":"check"},{"properties":{"rust-analyzer.check.ignore":{"default":[],"markdownDescription":"List of `cargo check` (or other command specified in `check.command`) diagnostics to ignore.\n\nFor example for `cargo check`: `dead_code`, `unused_imports`, `unused_variables`,...","type":"array","uniqueItems":true,"items":{"type":"string"}}},"title":"check"},{"properties":{"rust-analyzer.check.invocationStrategy":{"default":"per_workspace","markdownDescription":"Specifies the invocation strategy to use when running the check command.\nIf `per_workspace` is set, the command will be executed for each workspace.\nIf `once` is set, the command will be executed once.\nThis config only has an effect when `#rust-analyzer.check.overrideCommand#`\nis set.","type":"string","enum":["per_workspace","once"],"enumDescriptions":["The command will be executed for each Rust workspace with the workspace as the working directory.","The command will be executed once with the opened project as the working directory."]}},"title":"check"},{"properties":{"rust-analyzer.check.noDefaultFeatures":{"default":null,"markdownDescription":"Whether to pass `--no-default-features` to Cargo. Defaults to\n`#rust-analyzer.cargo.noDefaultFeatures#`.","type":["null","boolean"]}},"title":"check"},{"properties":{"rust-analyzer.check.overrideCommand":{"default":null,"markdownDescription":"Override the command rust-analyzer uses instead of `cargo check` for\ndiagnostics on save. The command is required to output json and\nshould therefore include `--message-format=json` or a similar option\n(if your client supports the `colorDiagnosticOutput` experimental\ncapability, you can use `--message-format=json-diagnostic-rendered-ansi`).\n\nIf you're changing this because you're using some tool wrapping\nCargo, you might also want to change\n`#rust-analyzer.cargo.buildScripts.overrideCommand#`.\n\nIf there are multiple linked projects/workspaces, this command is invoked for\neach of them, with the working directory being the workspace root\n(i.e., the folder containing the `Cargo.toml`). This can be overwritten\nby changing `#rust-analyzer.check.invocationStrategy#`.\n\nIf `$saved_file` is part of the command, rust-analyzer will pass\nthe absolute path of the saved file to the provided command. This is\nintended to be used with non-Cargo build systems.\nNote that `$saved_file` is experimental and may be removed in the future.\n\nAn example command would be:\n\n```bash\ncargo check --workspace --message-format=json --all-targets\n```\n.","items":{"type":"string"},"type":["null","array"]}},"title":"check"},{"properties":{"rust-analyzer.check.targets":{"default":null,"markdownDescription":"Check for specific targets. Defaults to `#rust-analyzer.cargo.target#` if empty.\n\nCan be a single target, e.g. `\"x86_64-unknown-linux-gnu\"` or a list of targets, e.g.\n`[\"aarch64-apple-darwin\", \"x86_64-apple-darwin\"]`.\n\nAliased as `\"checkOnSave.targets\"`.","anyOf":[{"type":"null"},{"type":"string"},{"items":{"type":"string"},"type":"array"}]}},"title":"check"},{"properties":{"rust-analyzer.check.workspace":{"default":true,"markdownDescription":"Whether `--workspace` should be passed to `cargo check`.\nIf false, `-p <package>` will be passed instead if applicable. In case it is not, no\ncheck will be performed.","type":"boolean"}},"title":"check"},{"properties":{"rust-analyzer.completion.addSemicolonToUnit":{"default":true,"markdownDescription":"Whether to automatically add a semicolon when completing unit-returning functions.\n\nIn `match` arms it completes a comma instead.","type":"boolean"}},"title":"completion"},{"properties":{"rust-analyzer.completion.autoAwait.enable":{"default":true,"markdownDescription":"Toggles the additional completions that automatically show method calls and field accesses with `await` prefixed to them when completing on a future.","type":"boolean"}},"title":"completion"},{"properties":{"rust-analyzer.completion.autoIter.enable":{"default":true,"markdownDescription":"Toggles the additional completions that automatically show method calls with `iter()` or `into_iter()` prefixed to them when completing on a type that has them.","type":"boolean"}},"title":"completion"},{"properties":{"rust-analyzer.completion.autoimport.enable":{"default":true,"markdownDescription":"Toggles the additional completions that automatically add imports when completed.\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.","type":"boolean"}},"title":"completion"},{"properties":{"rust-analyzer.completion.autoimport.exclude":{"default":[{"path":"core::borrow::Borrow","type":"methods"},{"path":"core::borrow::BorrowMut","type":"methods"}],"markdownDescription":"A list of full paths to items to exclude from auto-importing completions.\n\nTraits in this list won't have their methods suggested in completions unless the trait\nis in scope.\n\nYou can either specify a string path which defaults to type \"always\" or use the more verbose\nform `{ \"path\": \"path::to::item\", type: \"always\" }`.\n\nFor traits the type \"methods\" can be used to only exclude the methods but not the trait itself.\n\nThis setting also inherits `#rust-analyzer.completion.excludeTraits#`.","items":{"anyOf":[{"type":"string"},{"properties":{"path":{"type":"string"},"type":{"enum":["always","methods"],"enumDescriptions":["Do not show this item or its methods (if it is a trait) in auto-import completions.","Do not show this traits methods in auto-import completions."],"type":"string"}},"type":"object"}]},"type":"array"}},"title":"completion"},{"properties":{"rust-analyzer.completion.autoself.enable":{"default":true,"markdownDescription":"Toggles the additional completions that automatically show method calls and field accesses\nwith `self` prefixed to them when inside a method.","type":"boolean"}},"title":"completion"},{"properties":{"rust-analyzer.completion.callable.snippets":{"default":"fill_arguments","markdownDescription":"Whether to add parenthesis and argument snippets when completing function.","type":"string","enum":["fill_arguments","add_parentheses","none"],"enumDescriptions":["Add call parentheses and pre-fill arguments.","Add call parentheses.","Do no snippet completions for callables."]}},"title":"completion"},{"properties":{"rust-analyzer.completion.excludeTraits":{"default":[],"markdownDescription":"A list of full paths to traits whose methods to exclude from completion.\n\nMethods from these traits won't be completed, even if the trait is in scope. However, they will still be suggested on expressions whose type is `dyn Trait`, `impl Trait` or `T where T: Trait`.\n\nNote that the trait themselves can still be completed.","items":{"type":"string"},"type":"array"}},"title":"completion"},{"properties":{"rust-analyzer.completion.fullFunctionSignatures.enable":{"default":false,"markdownDescription":"Whether to show full function/method signatures in completion docs.","type":"boolean"}},"title":"completion"},{"properties":{"rust-analyzer.completion.hideDeprecated":{"default":false,"markdownDescription":"Whether to omit deprecated items from autocompletion. By default they are marked as deprecated but not hidden.","type":"boolean"}},"title":"completion"},{"properties":{"rust-analyzer.completion.limit":{"default":null,"markdownDescription":"Maximum number of completions to return. If `None`, the limit is infinite.","minimum":0,"type":["null","integer"]}},"title":"completion"},{"properties":{"rust-analyzer.completion.postfix.enable":{"default":true,"markdownDescription":"Whether to show postfix snippets like `dbg`, `if`, `not`, etc.","type":"boolean"}},"title":"completion"},{"properties":{"rust-analyzer.completion.privateEditable.enable":{"default":false,"markdownDescription":"Enables completions of private items and fields that are defined in the current workspace even if they are not visible at the current position.","type":"boolean"}},"title":"completion"},{"properties":{"rust-analyzer.completion.snippets.custom":{"default":{"Box::pin":{"body":"Box::pin(${receiver})","requires":"std::boxed::Box","scope":"expr","postfix":"pinbox","description":"Put the expression into a pinned `Box`"},"Rc::new":{"body":"Rc::new(${receiver})","requires":"std::rc::Rc","scope":"expr","postfix":"rc","description":"Put the expression into an `Rc`"},"Some":{"scope":"expr","body":"Some(${receiver})","postfix":"some","description":"Wrap the expression in an `Option::Some`"},"Ok":{"scope":"expr","body":"Ok(${receiver})","postfix":"ok","description":"Wrap the expression in a `Result::Ok`"},"Arc::new":{"body":"Arc::new(${receiver})","requires":"std::sync::Arc","scope":"expr","postfix":"arc","description":"Put the expression into an `Arc`"},"Err":{"scope":"expr","body":"Err(${receiver})","postfix":"err","description":"Wrap the expression in a `Result::Err`"}},"markdownDescription":"Custom completion snippets.","type":"object"}},"title":"completion"},{"properties":{"rust-analyzer.completion.termSearch.enable":{"default":false,"markdownDescription":"Whether to enable term search based snippets like `Some(foo.bar().baz())`.","type":"boolean"}},"title":"completion"},{"properties":{"rust-analyzer.completion.termSearch.fuel":{"default":1000,"markdownDescription":"Term search fuel in \"units of work\" for autocompletion (Defaults to 1000).","minimum":0,"type":"integer"}},"title":"completion"},{"properties":{"rust-analyzer.diagnostics.disabled":{"default":[],"markdownDescription":"List of rust-analyzer diagnostics to disable.","type":"array","uniqueItems":true,"items":{"type":"string"}}},"title":"diagnostics"},{"properties":{"rust-analyzer.diagnostics.enable":{"default":true,"markdownDescription":"Whether to show native rust-analyzer diagnostics.","type":"boolean"}},"title":"diagnostics"},{"properties":{"rust-analyzer.diagnostics.experimental.enable":{"default":false,"markdownDescription":"Whether to show experimental rust-analyzer diagnostics that might\nhave more false positives than usual.","type":"boolean"}},"title":"diagnostics"},{"properties":{"rust-analyzer.diagnostics.remapPrefix":{"default":{},"markdownDescription":"Map of prefixes to be substituted when parsing diagnostic file paths.\nThis should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.","type":"object"}},"title":"diagnostics"},{"properties":{"rust-analyzer.diagnostics.styleLints.enable":{"default":false,"markdownDescription":"Whether to run additional style lints.","type":"boolean"}},"title":"diagnostics"},{"properties":{"rust-analyzer.diagnostics.warningsAsHint":{"default":[],"markdownDescription":"List of warnings that should be displayed with hint severity.\n\nThe warnings will be indicated by faded text or three dots in code\nand will not show up in the `Problems Panel`.","items":{"type":"string"},"type":"array"}},"title":"diagnostics"},{"properties":{"rust-analyzer.diagnostics.warningsAsInfo":{"default":[],"markdownDescription":"List of warnings that should be displayed with info severity.\n\nThe warnings will be indicated by a blue squiggly underline in code\nand a blue icon in the `Problems Panel`.","items":{"type":"string"},"type":"array"}},"title":"diagnostics"},{"properties":{"rust-analyzer.files.exclude":{"default":[],"markdownDescription":"These paths (file/directories) will be ignored by rust-analyzer. They are\nrelative to the workspace root, and globs are not supported. You may\nalso need to add the folders to Code's `files.watcherExclude`.","items":{"type":"string"},"type":"array"}},"title":"files"},{"properties":{"rust-analyzer.files.watcher":{"default":"client","markdownDescription":"Controls file watching implementation.","type":"string","enum":["client","server"],"enumDescriptions":["Use the client (editor) to watch files for changes","Use server-side file watching"]}},"title":"files"},{"properties":{"rust-analyzer.highlightRelated.breakPoints.enable":{"default":true,"markdownDescription":"Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.","type":"boolean"}},"title":"highlightRelated"},{"properties":{"rust-analyzer.highlightRelated.closureCaptures.enable":{"default":true,"markdownDescription":"Enables highlighting of all captures of a closure while the cursor is on the `|` or move keyword of a closure.","type":"boolean"}},"title":"highlightRelated"},{"properties":{"rust-analyzer.highlightRelated.exitPoints.enable":{"default":true,"markdownDescription":"Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).","type":"boolean"}},"title":"highlightRelated"},{"properties":{"rust-analyzer.highlightRelated.references.enable":{"default":true,"markdownDescription":"Enables highlighting of related references while the cursor is on any identifier.","type":"boolean"}},"title":"highlightRelated"},{"properties":{"rust-analyzer.highlightRelated.yieldPoints.enable":{"default":true,"markdownDescription":"Enables highlighting of all break points for a loop or block context while the cursor is on any `async` or `await` keywords.","type":"boolean"}},"title":"highlightRelated"},{"properties":{"rust-analyzer.hover.actions.debug.enable":{"default":true,"markdownDescription":"Whether to show `Debug` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.","type":"boolean"}},"title":"hover"},{"properties":{"rust-analyzer.hover.actions.enable":{"default":true,"markdownDescription":"Whether to show HoverActions in Rust files.","type":"boolean"}},"title":"hover"},{"properties":{"rust-analyzer.hover.actions.gotoTypeDef.enable":{"default":true,"markdownDescription":"Whether to show `Go to Type Definition` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.","type":"boolean"}},"title":"hover"},{"properties":{"rust-analyzer.hover.actions.implementations.enable":{"default":true,"markdownDescription":"Whether to show `Implementations` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.","type":"boolean"}},"title":"hover"},{"properties":{"rust-analyzer.hover.actions.references.enable":{"default":false,"markdownDescription":"Whether to show `References` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.","type":"boolean"}},"title":"hover"},{"properties":{"rust-analyzer.hover.actions.run.enable":{"default":true,"markdownDescription":"Whether to show `Run` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` is set.","type":"boolean"}},"title":"hover"},{"properties":{"rust-analyzer.hover.actions.updateTest.enable":{"default":true,"markdownDescription":"Whether to show `Update Test` action. Only applies when\n`#rust-analyzer.hover.actions.enable#` and `#rust-analyzer.hover.actions.run.enable#` are set.","type":"boolean"}},"title":"hover"},{"properties":{"rust-analyzer.hover.documentation.enable":{"default":true,"markdownDescription":"Whether to show documentation on hover.","type":"boolean"}},"title":"hover"},{"properties":{"rust-analyzer.hover.documentation.keywords.enable":{"default":true,"markdownDescription":"Whether to show keyword hover popups. Only applies when\n`#rust-analyzer.hover.documentation.enable#` is set.","type":"boolean"}},"title":"hover"},{"properties":{"rust-analyzer.hover.dropGlue.enable":{"default":true,"markdownDescription":"Whether to show drop glue information on hover.","type":"boolean"}},"title":"hover"},{"properties":{"rust-analyzer.hover.links.enable":{"default":true,"markdownDescription":"Use markdown syntax for links on hover.","type":"boolean"}},"title":"hover"},{"properties":{"rust-analyzer.hover.maxSubstitutionLength":{"default":20,"markdownDescription":"Whether to show what types are used as generic arguments in calls etc. on hover, and what is their max length to show such types, beyond it they will be shown with ellipsis.\n\nThis can take three values: `null` means \"unlimited\", the string `\"hide\"` means to not show generic substitutions at all, and a number means to limit them to X characters.\n\nThe default is 20 characters.","anyOf":[{"type":"null"},{"enum":["hide"],"type":"string"},{"type":"integer"}]}},"title":"hover"},{"properties":{"rust-analyzer.hover.memoryLayout.alignment":{"default":"hexadecimal","markdownDescription":"How to render the align information in a memory layout hover.","anyOf":[{"type":"null"},{"enum":["both","decimal","hexadecimal"],"enumDescriptions":["Render as 12 (0xC)","Render as 12","Render as 0xC"],"type":"string"}]}},"title":"hover"},{"properties":{"rust-analyzer.hover.memoryLayout.enable":{"default":true,"markdownDescription":"Whether to show memory layout data on hover.","type":"boolean"}},"title":"hover"},{"properties":{"rust-analyzer.hover.memoryLayout.niches":{"default":false,"markdownDescription":"How to render the niche information in a memory layout hover.","type":["null","boolean"]}},"title":"hover"},{"properties":{"rust-analyzer.hover.memoryLayout.offset":{"default":"hexadecimal","markdownDescription":"How to render the offset information in a memory layout hover.","anyOf":[{"type":"null"},{"enum":["both","decimal","hexadecimal"],"enumDescriptions":["Render as 12 (0xC)","Render as 12","Render as 0xC"],"type":"string"}]}},"title":"hover"},{"properties":{"rust-analyzer.hover.memoryLayout.size":{"default":"both","markdownDescription":"How to render the size information in a memory layout hover.","anyOf":[{"type":"null"},{"enum":["both","decimal","hexadecimal"],"enumDescriptions":["Render as 12 (0xC)","Render as 12","Render as 0xC"],"type":"string"}]}},"title":"hover"},{"properties":{"rust-analyzer.hover.show.enumVariants":{"default":5,"markdownDescription":"How many variants of an enum to display when hovering on. Show none if empty.","minimum":0,"type":["null","integer"]}},"title":"hover"},{"properties":{"rust-analyzer.hover.show.fields":{"default":5,"markdownDescription":"How many fields of a struct, variant or union to display when hovering on. Show none if empty.","minimum":0,"type":["null","integer"]}},"title":"hover"},{"properties":{"rust-analyzer.hover.show.traitAssocItems":{"default":null,"markdownDescription":"How many associated items of a trait to display when hovering a trait.","minimum":0,"type":["null","integer"]}},"title":"hover"},{"properties":{"rust-analyzer.imports.granularity.enforce":{"default":false,"markdownDescription":"Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.","type":"boolean"}},"title":"imports"},{"properties":{"rust-analyzer.imports.granularity.group":{"default":"crate","markdownDescription":"How imports should be grouped into use statements.","type":"string","enum":["preserve","crate","module","item","one"],"enumDescriptions":["Do not change the granularity of any imports and preserve the original structure written by the developer.","Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.","Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.","Flatten imports so that each has its own use statement.","Merge all imports into a single use statement as long as they have the same visibility and attributes."]}},"title":"imports"},{"properties":{"rust-analyzer.imports.group.enable":{"default":true,"markdownDescription":"Group inserted imports by the [following order](https://rust-analyzer.github.io/book/features.html#auto-import). Groups are separated by newlines.","type":"boolean"}},"title":"imports"},{"properties":{"rust-analyzer.imports.merge.glob":{"default":true,"markdownDescription":"Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.","type":"boolean"}},"title":"imports"},{"properties":{"rust-analyzer.imports.preferNoStd":{"default":false,"markdownDescription":"Prefer to unconditionally use imports of the core and alloc crate, over the std crate.","type":"boolean"}},"title":"imports"},{"properties":{"rust-analyzer.imports.preferPrelude":{"default":false,"markdownDescription":"Whether to prefer import paths containing a `prelude` module.","type":"boolean"}},"title":"imports"},{"properties":{"rust-analyzer.imports.prefix":{"default":"plain","markdownDescription":"The path structure for newly inserted paths to use.","type":"string","enum":["plain","self","crate"],"enumDescriptions":["Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.","Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item. Prefixes `self` in front of the path if it starts with a module.","Force import paths to be absolute by always starting them with `crate` or the extern crate name they come from."]}},"title":"imports"},{"properties":{"rust-analyzer.imports.prefixExternPrelude":{"default":false,"markdownDescription":"Whether to prefix external (including std, core) crate imports with `::`. e.g. \"use ::std::io::Read;\".","type":"boolean"}},"title":"imports"},{"properties":{"rust-analyzer.inlayHints.bindingModeHints.enable":{"default":false,"markdownDescription":"Whether to show inlay type hints for binding modes.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.chainingHints.enable":{"default":true,"markdownDescription":"Whether to show inlay type hints for method chains.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.closingBraceHints.enable":{"default":true,"markdownDescription":"Whether to show inlay hints after a closing `}` to indicate what item it belongs to.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.closingBraceHints.minLines":{"default":25,"markdownDescription":"Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1\nto always show them).","minimum":0,"type":"integer"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.closureCaptureHints.enable":{"default":false,"markdownDescription":"Whether to show inlay hints for closure captures.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.closureReturnTypeHints.enable":{"default":"never","markdownDescription":"Whether to show inlay type hints for return types of closures.","type":"string","enum":["always","never","with_block"],"enumDescriptions":["Always show type hints for return types of closures.","Never show type hints for return types of closures.","Only show type hints for return types of closures with blocks."]}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.closureStyle":{"default":"impl_fn","markdownDescription":"Closure notation in type and chaining inlay hints.","type":"string","enum":["impl_fn","rust_analyzer","with_id","hide"],"enumDescriptions":["`impl_fn`: `impl FnMut(i32, u64) -> i8`","`rust_analyzer`: `|i32, u64| -> i8`","`with_id`: `{closure#14352}`, where that id is the unique number of the closure in r-a internals","`hide`: Shows `...` for every closure type"]}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.discriminantHints.enable":{"default":"never","markdownDescription":"Whether to show enum variant discriminant hints.","type":"string","enum":["always","never","fieldless"],"enumDescriptions":["Always show all discriminant hints.","Never show discriminant hints.","Only show discriminant hints on fieldless enum variants."]}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.expressionAdjustmentHints.enable":{"default":"never","markdownDescription":"Whether to show inlay hints for type adjustments.","type":"string","enum":["always","never","reborrow"],"enumDescriptions":["Always show all adjustment hints.","Never show adjustment hints.","Only show auto borrow and dereference adjustment hints."]}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.expressionAdjustmentHints.hideOutsideUnsafe":{"default":false,"markdownDescription":"Whether to hide inlay hints for type adjustments outside of `unsafe` blocks.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.expressionAdjustmentHints.mode":{"default":"prefix","markdownDescription":"Whether to show inlay hints as postfix ops (`.*` instead of `*`, etc).","type":"string","enum":["prefix","postfix","prefer_prefix","prefer_postfix"],"enumDescriptions":["Always show adjustment hints as prefix (`*expr`).","Always show adjustment hints as postfix (`expr.*`).","Show prefix or postfix depending on which uses less parenthesis, preferring prefix.","Show prefix or postfix depending on which uses less parenthesis, preferring postfix."]}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.genericParameterHints.const.enable":{"default":true,"markdownDescription":"Whether to show const generic parameter name inlay hints.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.genericParameterHints.lifetime.enable":{"default":false,"markdownDescription":"Whether to show generic lifetime parameter name inlay hints.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.genericParameterHints.type.enable":{"default":false,"markdownDescription":"Whether to show generic type parameter name inlay hints.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.implicitDrops.enable":{"default":false,"markdownDescription":"Whether to show implicit drop hints.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.implicitSizedBoundHints.enable":{"default":false,"markdownDescription":"Whether to show inlay hints for the implied type parameter `Sized` bound.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.lifetimeElisionHints.enable":{"default":"never","markdownDescription":"Whether to show inlay type hints for elided lifetimes in function signatures.","type":"string","enum":["always","never","skip_trivial"],"enumDescriptions":["Always show lifetime elision hints.","Never show lifetime elision hints.","Only show lifetime elision hints if a return type is involved."]}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.lifetimeElisionHints.useParameterNames":{"default":false,"markdownDescription":"Whether to prefer using parameter names as the name for elided lifetime hints if possible.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.maxLength":{"default":25,"markdownDescription":"Maximum length for inlay hints. Set to null to have an unlimited length.","minimum":0,"type":["null","integer"]}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.parameterHints.enable":{"default":true,"markdownDescription":"Whether to show function parameter name inlay hints at the call\nsite.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.rangeExclusiveHints.enable":{"default":false,"markdownDescription":"Whether to show exclusive range inlay hints.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.reborrowHints.enable":{"default":"never","markdownDescription":"Whether to show inlay hints for compiler inserted reborrows.\nThis setting is deprecated in favor of #rust-analyzer.inlayHints.expressionAdjustmentHints.enable#.","type":"string","enum":["always","never","mutable"],"enumDescriptions":["Always show reborrow hints.","Never show reborrow hints.","Only show mutable reborrow hints."]}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.renderColons":{"default":true,"markdownDescription":"Whether to render leading colons for type hints, and trailing colons for parameter hints.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.typeHints.enable":{"default":true,"markdownDescription":"Whether to show inlay type hints for variables.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.typeHints.hideClosureInitialization":{"default":false,"markdownDescription":"Whether to hide inlay type hints for `let` statements that initialize to a closure.\nOnly applies to closures with blocks, same as `#rust-analyzer.inlayHints.closureReturnTypeHints.enable#`.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.typeHints.hideClosureParameter":{"default":false,"markdownDescription":"Whether to hide inlay parameter type hints for closures.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.inlayHints.typeHints.hideNamedConstructor":{"default":false,"markdownDescription":"Whether to hide inlay type hints for constructors.","type":"boolean"}},"title":"inlayHints"},{"properties":{"rust-analyzer.interpret.tests":{"default":false,"markdownDescription":"Enables the experimental support for interpreting tests.","type":"boolean"}},"title":"interpret"},{"properties":{"rust-analyzer.joinLines.joinAssignments":{"default":true,"markdownDescription":"Join lines merges consecutive declaration and initialization of an assignment.","type":"boolean"}},"title":"joinLines"},{"properties":{"rust-analyzer.joinLines.joinElseIf":{"default":true,"markdownDescription":"Join lines inserts else between consecutive ifs.","type":"boolean"}},"title":"joinLines"},{"properties":{"rust-analyzer.joinLines.removeTrailingComma":{"default":true,"markdownDescription":"Join lines removes trailing commas.","type":"boolean"}},"title":"joinLines"},{"properties":{"rust-analyzer.joinLines.unwrapTrivialBlock":{"default":true,"markdownDescription":"Join lines unwraps trivial blocks.","type":"boolean"}},"title":"joinLines"},{"properties":{"rust-analyzer.lens.debug.enable":{"default":true,"markdownDescription":"Whether to show `Debug` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.","type":"boolean"}},"title":"lens"},{"properties":{"rust-analyzer.lens.enable":{"default":true,"markdownDescription":"Whether to show CodeLens in Rust files.","type":"boolean"}},"title":"lens"},{"properties":{"rust-analyzer.lens.implementations.enable":{"default":true,"markdownDescription":"Whether to show `Implementations` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.","type":"boolean"}},"title":"lens"},{"properties":{"rust-analyzer.lens.location":{"default":"above_name","markdownDescription":"Where to render annotations.","type":"string","enum":["above_name","above_whole_item"],"enumDescriptions":["Render annotations above the name of the item.","Render annotations above the whole item, including documentation comments and attributes."]}},"title":"lens"},{"properties":{"rust-analyzer.lens.references.adt.enable":{"default":false,"markdownDescription":"Whether to show `References` lens for Struct, Enum, and Union.\nOnly applies when `#rust-analyzer.lens.enable#` is set.","type":"boolean"}},"title":"lens"},{"properties":{"rust-analyzer.lens.references.enumVariant.enable":{"default":false,"markdownDescription":"Whether to show `References` lens for Enum Variants.\nOnly applies when `#rust-analyzer.lens.enable#` is set.","type":"boolean"}},"title":"lens"},{"properties":{"rust-analyzer.lens.references.method.enable":{"default":false,"markdownDescription":"Whether to show `Method References` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.","type":"boolean"}},"title":"lens"},{"properties":{"rust-analyzer.lens.references.trait.enable":{"default":false,"markdownDescription":"Whether to show `References` lens for Trait.\nOnly applies when `#rust-analyzer.lens.enable#` is set.","type":"boolean"}},"title":"lens"},{"properties":{"rust-analyzer.lens.run.enable":{"default":true,"markdownDescription":"Whether to show `Run` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.","type":"boolean"}},"title":"lens"},{"properties":{"rust-analyzer.lens.updateTest.enable":{"default":true,"markdownDescription":"Whether to show `Update Test` lens. Only applies when\n`#rust-analyzer.lens.enable#` and `#rust-analyzer.lens.run.enable#` are set.","type":"boolean"}},"title":"lens"},{"properties":{"rust-analyzer.linkedProjects":{"default":[],"markdownDescription":"Disable project auto-discovery in favor of explicitly specified set\nof projects.\n\nElements must be paths pointing to `Cargo.toml`,\n`rust-project.json`, `.rs` files (which will be treated as standalone files) or JSON\nobjects in `rust-project.json` format.","items":{"type":["string","object"]},"type":"array"}},"title":"general"},{"properties":{"rust-analyzer.lru.capacity":{"default":null,"markdownDescription":"Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.","type":["null","integer"],"minimum":0,"maximum":65535}},"title":"lru"},{"properties":{"rust-analyzer.lru.query.capacities":{"default":{},"markdownDescription":"Sets the LRU capacity of the specified queries.","type":"object"}},"title":"lru"},{"properties":{"rust-analyzer.notifications.cargoTomlNotFound":{"default":true,"markdownDescription":"Whether to show `can't find Cargo.toml` error message.","type":"boolean"}},"title":"notifications"},{"properties":{"rust-analyzer.numThreads":{"default":null,"markdownDescription":"How many worker threads in the main loop. The default `null` means to pick automatically.","anyOf":[{"type":"null"},{"minimum":0,"maximum":255,"type":"number"},{"enum":["physical","logical"],"enumDescriptions":["Use the number of physical cores","Use the number of logical cores"],"type":"string"}]}},"title":"general"},{"properties":{"rust-analyzer.procMacro.attributes.enable":{"default":true,"markdownDescription":"Expand attribute macros. Requires `#rust-analyzer.procMacro.enable#` to be set.","type":"boolean"}},"title":"procMacro"},{"properties":{"rust-analyzer.procMacro.enable":{"default":true,"markdownDescription":"Enable support for procedural macros, implies `#rust-analyzer.cargo.buildScripts.enable#`.","type":"boolean"}},"title":"procMacro"},{"properties":{"rust-analyzer.procMacro.ignored":{"default":{},"markdownDescription":"These proc-macros will be ignored when trying to expand them.\n\nThis config takes a map of crate names with the exported proc-macro names to ignore as values.","type":"object"}},"title":"procMacro"},{"properties":{"rust-analyzer.procMacro.server":{"default":null,"markdownDescription":"Internal config, path to proc-macro server executable.","type":["null","string"]}},"title":"procMacro"},{"properties":{"rust-analyzer.references.excludeImports":{"default":false,"markdownDescription":"Exclude imports from find-all-references.","type":"boolean"}},"title":"references"},{"properties":{"rust-analyzer.references.excludeTests":{"default":false,"markdownDescription":"Exclude tests from find-all-references and call-hierarchy.","type":"boolean"}},"title":"references"},{"properties":{"rust-analyzer.runnables.command":{"default":null,"markdownDescription":"Command to be executed instead of 'cargo' for runnables.","type":["null","string"]}},"title":"runnables"},{"properties":{"rust-analyzer.runnables.extraArgs":{"default":[],"markdownDescription":"Additional arguments to be passed to cargo for runnables such as\ntests or binaries. For example, it may be `--release`.","items":{"type":"string"},"type":"array"}},"title":"runnables"},{"properties":{"rust-analyzer.runnables.extraTestBinaryArgs":{"default":["--show-output"],"markdownDescription":"Additional arguments to be passed through Cargo to launched tests, benchmarks, or\ndoc-tests.\n\nUnless the launched target uses a\n[custom test harness](https://doc.rust-lang.org/cargo/reference/cargo-targets.html#the-harness-field),\nthey will end up being interpreted as options to\n[`rustc`’s built-in test harness (“libtest”)](https://doc.rust-lang.org/rustc/tests/index.html#cli-arguments).","items":{"type":"string"},"type":"array"}},"title":"runnables"},{"properties":{"rust-analyzer.rustc.source":{"default":null,"markdownDescription":"Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\nprojects, or \"discover\" to try to automatically find it if the `rustc-dev` component\nis installed.\n\nAny project which uses rust-analyzer with the rustcPrivate\ncrates must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.\n\nThis option does not take effect until rust-analyzer is restarted.","type":["null","string"]}},"title":"rustc"},{"properties":{"rust-analyzer.rustfmt.extraArgs":{"default":[],"markdownDescription":"Additional arguments to `rustfmt`.","items":{"type":"string"},"type":"array"}},"title":"rustfmt"},{"properties":{"rust-analyzer.rustfmt.overrideCommand":{"default":null,"markdownDescription":"Advanced option, fully override the command rust-analyzer uses for\nformatting. This should be the equivalent of `rustfmt` here, and\nnot that of `cargo fmt`. The file contents will be passed on the\nstandard input and the formatted result will be read from the\nstandard output.","items":{"type":"string"},"type":["null","array"]}},"title":"rustfmt"},{"properties":{"rust-analyzer.rustfmt.rangeFormatting.enable":{"default":false,"markdownDescription":"Enables the use of rustfmt's unstable range formatting command for the\n`textDocument/rangeFormatting` request. The rustfmt option is unstable and only\navailable on a nightly build.","type":"boolean"}},"title":"rustfmt"},{"properties":{"rust-analyzer.semanticHighlighting.doc.comment.inject.enable":{"default":true,"markdownDescription":"Inject additional highlighting into doc comments.\n\nWhen enabled, rust-analyzer will highlight rust source in doc comments as well as intra\ndoc links.","type":"boolean"}},"title":"semanticHighlighting"},{"properties":{"rust-analyzer.semanticHighlighting.nonStandardTokens":{"default":true,"markdownDescription":"Whether the server is allowed to emit non-standard tokens and modifiers.","type":"boolean"}},"title":"semanticHighlighting"},{"properties":{"rust-analyzer.semanticHighlighting.operator.enable":{"default":true,"markdownDescription":"Use semantic tokens for operators.\n\nWhen disabled, rust-analyzer will emit semantic tokens only for operator tokens when\nthey are tagged with modifiers.","type":"boolean"}},"title":"semanticHighlighting"},{"properties":{"rust-analyzer.semanticHighlighting.operator.specialization.enable":{"default":false,"markdownDescription":"Use specialized semantic tokens for operators.\n\nWhen enabled, rust-analyzer will emit special token types for operator tokens instead\nof the generic `operator` token type.","type":"boolean"}},"title":"semanticHighlighting"},{"properties":{"rust-analyzer.semanticHighlighting.punctuation.enable":{"default":false,"markdownDescription":"Use semantic tokens for punctuation.\n\nWhen disabled, rust-analyzer will emit semantic tokens only for punctuation tokens when\nthey are tagged with modifiers or have a special role.","type":"boolean"}},"title":"semanticHighlighting"},{"properties":{"rust-analyzer.semanticHighlighting.punctuation.separate.macro.bang":{"default":false,"markdownDescription":"When enabled, rust-analyzer will emit a punctuation semantic token for the `!` of macro\ncalls.","type":"boolean"}},"title":"semanticHighlighting"},{"properties":{"rust-analyzer.semanticHighlighting.punctuation.specialization.enable":{"default":false,"markdownDescription":"Use specialized semantic tokens for punctuation.\n\nWhen enabled, rust-analyzer will emit special token types for punctuation tokens instead\nof the generic `punctuation` token type.","type":"boolean"}},"title":"semanticHighlighting"},{"properties":{"rust-analyzer.semanticHighlighting.strings.enable":{"default":true,"markdownDescription":"Use semantic tokens for strings.\n\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\nBy disabling semantic tokens for strings, other grammars can be used to highlight\ntheir contents.","type":"boolean"}},"title":"semanticHighlighting"},{"properties":{"rust-analyzer.signatureInfo.detail":{"default":"full","markdownDescription":"Show full signature of the callable. Only shows parameters if disabled.","type":"string","enum":["full","parameters"],"enumDescriptions":["Show the entire signature.","Show only the parameters."]}},"title":"signatureInfo"},{"properties":{"rust-analyzer.signatureInfo.documentation.enable":{"default":true,"markdownDescription":"Show documentation.","type":"boolean"}},"title":"signatureInfo"},{"properties":{"rust-analyzer.typing.triggerChars":{"default":"=.","markdownDescription":"Specify the characters allowed to invoke special on typing triggers.\n- typing `=` after `let` tries to smartly add `;` if `=` is followed by an existing expression\n- typing `=` between two expressions adds `;` when in statement position\n- typing `=` to turn an assignment into an equality comparison removes `;` when in expression position\n- typing `.` in a chain method call auto-indents\n- typing `{` or `(` in front of an expression inserts a closing `}` or `)` after the expression\n- typing `{` in a use item adds a closing `}` in the right place\n- typing `>` to complete a return type `->` will insert a whitespace after it\n- typing `<` in a path or type position inserts a closing `>` after the path or type.","type":["null","string"]}},"title":"typing"},{"properties":{"rust-analyzer.vfs.extraIncludes":{"default":[],"markdownDescription":"Additional paths to include in the VFS. Generally for code that is\ngenerated or otherwise managed by a build system outside of Cargo,\nthough Cargo might be the eventual consumer.","items":{"type":"string"},"type":"array"}},"title":"vfs"},{"properties":{"rust-analyzer.workspace.discoverConfig":{"default":null,"markdownDescription":"Enables automatic discovery of projects using [`DiscoverWorkspaceConfig::command`].\n\n[`DiscoverWorkspaceConfig`] also requires setting `progress_label` and `files_to_watch`.\n`progress_label` is used for the title in progress indicators, whereas `files_to_watch`\nis used to determine which build system-specific files should be watched in order to\nreload rust-analyzer.\n\nBelow is an example of a valid configuration:\n```json\n\"rust-analyzer.workspace.discoverConfig\": {\n        \"command\": [\n                \"rust-project\",\n                \"develop-json\"\n        ],\n        \"progressLabel\": \"rust-analyzer\",\n        \"filesToWatch\": [\n                \"BUCK\"\n        ]\n}\n```\n\n## On `DiscoverWorkspaceConfig::command`\n\n**Warning**: This format is provisional and subject to change.\n\n[`DiscoverWorkspaceConfig::command`] *must* return a JSON object\ncorresponding to `DiscoverProjectData::Finished`:\n\n```norun\n#[derive(Debug, Clone, Deserialize, Serialize)]\n#[serde(tag = \"kind\")]\n#[serde(rename_all = \"snake_case\")]\nenum DiscoverProjectData {\n        Finished { buildfile: Utf8PathBuf, project: ProjectJsonData },\n        Error { error: String, source: Option<String> },\n        Progress { message: String },\n}\n```\n\nAs JSON, `DiscoverProjectData::Finished` is:\n\n```json\n{\n        // the internally-tagged representation of the enum.\n        \"kind\": \"finished\",\n        // the file used by a non-Cargo build system to define\n        // a package or target.\n        \"buildfile\": \"rust-analyzer/BUILD\",\n        // the contents of a rust-project.json, elided for brevity\n        \"project\": {\n                \"sysroot\": \"foo\",\n                \"crates\": []\n        }\n}\n```\n\nIt is encouraged, but not required, to use the other variants on\n`DiscoverProjectData` to provide a more polished end-user experience.\n\n`DiscoverWorkspaceConfig::command` may *optionally* include an `{arg}`,\nwhich will be substituted with the JSON-serialized form of the following\nenum:\n\n```norun\n#[derive(PartialEq, Clone, Debug, Serialize)]\n#[serde(rename_all = \"camelCase\")]\npub enum DiscoverArgument {\n     Path(AbsPathBuf),\n     Buildfile(AbsPathBuf),\n}\n```\n\nThe JSON representation of `DiscoverArgument::Path` is:\n\n```json\n{\n        \"path\": \"src/main.rs\"\n}\n```\n\nSimilarly, the JSON representation of `DiscoverArgument::Buildfile` is:\n\n```json\n{\n        \"buildfile\": \"BUILD\"\n}\n```\n\n`DiscoverArgument::Path` is used to find and generate a `rust-project.json`,\nand therefore, a workspace, whereas `DiscoverArgument::buildfile` is used to\nto update an existing workspace. As a reference for implementors,\nbuck2's `rust-project` will likely be useful:\nhttps://github.com/facebook/buck2/tree/main/integrations/rust-project.","anyOf":[{"type":"null"},{"properties":{"progressLabel":{"type":"string"},"filesToWatch":{"items":{"type":"string"},"type":"array"},"command":{"items":{"type":"string"},"type":"array"}},"type":"object"}]}},"title":"workspace"},{"properties":{"rust-analyzer.workspace.symbol.search.kind":{"default":"only_types","markdownDescription":"Workspace symbol search kind.","type":"string","enum":["only_types","all_symbols"],"enumDescriptions":["Search for types only.","Search for all symbols kinds."]}},"title":"workspace"},{"properties":{"rust-analyzer.workspace.symbol.search.limit":{"default":128,"markdownDescription":"Limits the number of items returned from a workspace symbol search (Defaults to 128).\nSome clients like vs-code issue new searches on result filtering and don't require all results to be returned in the initial search.\nOther clients requires all results upfront and might require a higher limit.","minimum":0,"type":"integer"}},"title":"workspace"},{"properties":{"rust-analyzer.workspace.symbol.search.scope":{"default":"workspace","markdownDescription":"Workspace symbol search scope.","type":"string","enum":["workspace","workspace_and_dependencies"],"enumDescriptions":["Search in current workspace only.","Search in current workspace and dependencies."]}},"title":"workspace"},{"title":"$generated-end"}]